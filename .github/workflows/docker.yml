name: Build and Push Docker Images

on:
  push:
    branches: ["main", "master"]
    tags: ["v*"]
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1"   # Weekly rebuild to pick up PHP/OS patches

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        php_version: ["8.3", "8.4"]
    env:
      REGISTRY: docker.io
      IMAGE_NAME: bluegrassdigital/wordpress-azure-sync
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout latest tag for scheduled build
        if: ${{ github.event_name == 'schedule' }}
        run: |
          git fetch --tags
          git checkout $(git describe --tags --abbrev=0)

      - name: Set build timestamp
        run: echo "BUILD_DATE=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push (prod, multi-arch)
        id: build_prod
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: ${{ (github.ref_type == 'tag' || github.event_name == 'schedule') && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          push: true
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
          cache-from: type=gha,scope=${{ matrix.php_version }}-prod
          cache-to: type=gha,mode=max,scope=${{ matrix.php_version }}-prod
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-latest
            ${{ (github.ref_type == 'tag' || github.event_name == 'schedule') && format('{0}:{1}-stable', env.IMAGE_NAME, matrix.php_version) || '' }}
            ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-stable-${{ env.BUILD_DATE }}

      - name: Build and push (dev, multi-arch)
        id: build_dev
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          target: dev
          platforms: ${{ (github.ref_type == 'tag' || github.event_name == 'schedule') && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          push: true
          build-args: |
            PHP_VERSION=${{ matrix.php_version }}
          cache-from: type=gha,scope=${{ matrix.php_version }}-dev
          cache-to: type=gha,mode=max,scope=${{ matrix.php_version }}-dev
          provenance: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-dev-latest
            ${{ (github.ref_type == 'tag' || github.event_name == 'schedule') && format('{0}:{1}-dev-stable', env.IMAGE_NAME, matrix.php_version) || '' }}
      - name: Resolve full PHP version from prod image
        id: phpver_prod
        env:
          IMAGE: ${{ env.IMAGE_NAME }}
        run: |
          FULL=$(docker run --rm $IMAGE:${{ matrix.php_version }}-stable-${{ env.BUILD_DATE }} php -r 'echo PHP_VERSION;')
          echo "full=$FULL" >> $GITHUB_OUTPUT

      - name: Resolve full PHP version from dev image
        if: ${{ github.ref_type == 'tag' }}
        id: phpver_dev
        env:
          IMAGE: ${{ env.IMAGE_NAME }}
        run: |
          FULL=$(docker run --rm $IMAGE:${{ matrix.php_version }}-dev-stable php -r 'echo PHP_VERSION;')
          echo "full=$FULL" >> $GITHUB_OUTPUT

      - name: Add tag with full PHP version (prod, multi-arch)
        env:
          IMAGE: ${{ env.IMAGE_NAME }}
        run: |
          if [ "${{ github.ref_type }}" = "tag" ]; then \
            docker buildx imagetools create --tag $IMAGE:${{ steps.phpver_prod.outputs.full }} $IMAGE:${{ matrix.php_version }}-stable-${{ env.BUILD_DATE }}; \
          fi

      - name: Add tag with full PHP version (dev, multi-arch)
        if: ${{ github.ref_type == 'tag' }}
        env:
          IMAGE: ${{ env.IMAGE_NAME }}
        run: |
          docker buildx imagetools create --tag $IMAGE:${{ steps.phpver_dev.outputs.full }}-dev $IMAGE:${{ matrix.php_version }}-dev-stable

      - name: Trivy scan (prod - json)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-stable-${{ env.BUILD_DATE }}
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'json'
          output: trivy-prod.json
          exit-code: '0'

      - name: Trivy Summary (prod)
        run: |
          set -e
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y jq >/dev/null
          fi
          TOTAL=$(jq '[.Results[].Vulnerabilities[]?] | length' trivy-prod.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-prod.json)
          CRIT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-prod.json)
          echo "### Trivy scan (prod) for PHP ${{ matrix.php_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Total: ${TOTAL} (HIGH: ${HIGH}, CRITICAL: ${CRIT})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Library | Severity | Installed | Fixed | ID | Title |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
          jq -r '
            [.Results[].Vulnerabilities[]? | {PkgName,Severity,InstalledVersion,FixedVersion,VulnerabilityID,Title,PrimaryURL}]
            | sort_by(.Severity) | reverse | .[0:20]
            | .[]
            | "| \(.PkgName) | \(.Severity) | \(.InstalledVersion // "-") | \(.FixedVersion // "-") | [\(.VulnerabilityID)](\(.PrimaryURL // "")) | \(.Title // "") |"
          ' trivy-prod.json >> $GITHUB_STEP_SUMMARY

      - name: Trivy scan (dev - json)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-dev-latest
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'json'
          output: trivy-dev.json
          exit-code: '0'

      - name: Trivy Summary (dev)
        run: |
          set -e
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y jq >/dev/null
          fi
          TOTAL=$(jq '[.Results[].Vulnerabilities[]?] | length' trivy-dev.json)
          HIGH=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length' trivy-dev.json)
          CRIT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length' trivy-dev.json)
          echo "### Trivy scan (dev) for PHP ${{ matrix.php_version }}" >> $GITHUB_STEP_SUMMARY
          echo "Total: ${TOTAL} (HIGH: ${HIGH}, CRITICAL: ${CRIT})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Library | Severity | Installed | Fixed | ID | Title |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|---|---|---|" >> $GITHUB_STEP_SUMMARY
          jq -r '
            [.Results[].Vulnerabilities[]? | {PkgName,Severity,InstalledVersion,FixedVersion,VulnerabilityID,Title,PrimaryURL}]
            | sort_by(.Severity) | reverse | .[0:20]
            | .[]
            | "| \(.PkgName) | \(.Severity) | \(.InstalledVersion // "-") | \(.FixedVersion // "-") | [\(.VulnerabilityID)](\(.PrimaryURL // "")) | \(.Title // "") |"
          ' trivy-dev.json >> $GITHUB_STEP_SUMMARY

      - name: Trivy SARIF (prod image)
        if: ${{ github.ref_type == 'tag' || github.event_name == 'schedule' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-stable-${{ env.BUILD_DATE }}
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: trivy-prod.sarif
          exit-code: '0'

      - name: Sanitize SARIF (prod)
        if: ${{ github.ref_type == 'tag' || github.event_name == 'schedule' }}
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y jq >/dev/null
          fi
          jq 'del(.runs[].automationDetails)' trivy-prod.sarif > trivy-prod.cleaned.sarif

      - name: Upload SARIF (prod)
        if: ${{ github.ref_type == 'tag' || github.event_name == 'schedule' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-prod.cleaned.sarif
          category: trivy-prod-${{ matrix.php_version }}

      - name: Trivy SARIF (dev image)
        if: ${{ github.ref_type == 'tag' || github.event_name == 'schedule' }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ matrix.php_version }}-dev-stable
          vuln-type: 'os,library'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: trivy-dev.sarif
          exit-code: '0'

      - name: Sanitize SARIF (dev)
        if: ${{ github.ref_type == 'tag' || github.event_name == 'schedule' }}
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y >/dev/null
            sudo apt-get install -y jq >/dev/null
          fi
          jq 'del(.runs[].automationDetails)' trivy-dev.sarif > trivy-dev.cleaned.sarif

      - name: Upload SARIF (dev)
        if: ${{ github.ref_type == 'tag' || github.event_name == 'schedule' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-dev.cleaned.sarif
          category: trivy-dev-${{ matrix.php_version }}
